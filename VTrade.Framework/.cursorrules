[General]
Language = MQL5
FileExtensions = .mq5;.mqh

[Rules]
; -- Class Definitions --
ClassDefinition       = ^\s*(?:class|struct)\s+([A-Za-z_]\w*)
ClassInNamespace      = ^\s*namespace\s+([A-Za-z_]\w*)\s*\{

; -- Function Definitions --
FunctionDefinition    = ^\s*(?:(?:virtual|static|inline)\s+)*(?:[A-Za-z_]\w*(?:\s*::\s*[A-Za-z_]\w*)*\s+)?[A-Za-z_]\w*\s*\([^)]*\)\s*(?:const)?\s*(?:;|\{)

; -- MQL5 Special and Event Functions --
OnInitFunction        = ^\s*int\s+OnInit\s*\([^)]*\)
OnTickFunction        = ^\s*void\s+OnTick\s*\([^)]*\)
OnDeinitFunction      = ^\s*void\s+OnDeinit\s*\([^)]*\)
OnTesterFunction      = ^\s*int\s+OnTester\s*\([^)]*\)
OnChartEventFunction  = ^\s*void\s+OnChartEvent\s*\([^)]*\)

; -- MQL5 Trading Functions --
OrderSendFunction     = ^\s*(?:bool|int)\s+OrderSend\s*\([^)]*\)
OrderModifyFunction   = ^\s*bool\s+OrderModify\s*\([^)]*\)
OrderCloseFunction    = ^\s*bool\s+OrderClose\s*\([^)]*\)
PositionOpenFunction  = ^\s*bool\s+PositionOpen\s*\([^)]*\)
PositionCloseFunction = ^\s*bool\s+PositionClose\s*\([^)]*\)
TradeCheckFunction    = ^\s*bool\s+OrderCheck\s*\([^)]*\)

; -- MQL5 Indicator Functions --
CustomIndicatorFunction = ^\s*double\s+iCustom\s*\([^)]*\)
MAFunction             = ^\s*double\s+iMA\s*\([^)]*\)
RSIFunction            = ^\s*double\s+iRSI\s*\([^)]*\)
StochFunction          = ^\s*double\s+iStochastic\s*\([^)]*\)
BBandsFunction         = ^\s*double\s+iBands\s*\([^)]*\)
ADXFunction            = ^\s*double\s+iADX\s*\([^)]*\)
MACDFunction           = ^\s*double\s+iMACD\s*\([^)]*\)

; -- MQL5 Trading Validation --
ValidateStopLoss     = ^\s*sl\s*=\s*[^;]+;
ValidateTakeProfit   = ^\s*tp\s*=\s*[^;]+;
ValidateLotSize      = ^\s*lots?\s*=\s*[^;]+;
ValidateSpread       = ^\s*spread\s*=\s*[^;]+;
ValidateSwap         = ^\s*swap\s*=\s*[^;]+;
ValidateMargin       = ^\s*margin\s*=\s*[^;]+;

; -- Constructors and Destructors --
ConstructorDefinition = ^\s*([A-Za-z_]\w*)\s*\([^)]*\)\s*(?:;|\{)
DestructorDefinition  = ^\s*~([A-Za-z_]\w*)\s*\([^)]*\)\s*(?:;|\{)

; -- Struct & Enum Definitions --
StructDefinition      = ^\s*struct\s+([A-Za-z_]\w*)
EnumDefinition        = ^\s*enum\s+([A-Za-z_]\w*)

; -- Input Variables --
InputDefinition       = ^\s*input\s+([A-Za-z_]\w*)\s+([A-Za-z_]\w*)(?:\s*=\s*[^;]+)?;

; -- Property Definitions --
PropertyDefinition    = ^\s*#property\s+(\w+)

; -- Preprocessor Directives --
PreprocessorDirective = ^\s*#\s*\w+
IncludeDirective      = ^\s*#include\s*[<"]([^>"]+)[>"]
DefineDirective       = ^\s*#define\s+([A-Za-z_]\w*)

; -- Comments --
LineComment           = //
MultiLineCommentStart = /\*
MultiLineCommentEnd   = \*/

; -- Block Delimiters --
BlockStart            = \{
BlockEnd              = \}

; -- MQL5 Specific Patterns --
IndicatorBuffer       = ^\s*double\s+([A-Za-z_]\w*)\[\];
SetIndexBuffer        = ^\s*SetIndexBuffer\s*\(\s*\d+\s*,\s*([A-Za-z_]\w*)

; -- Region Markers --
RegionStart           = ^\s*#pragma\s+region\b
RegionEnd             = ^\s*#pragma\s+endregion\b

[Navigation]
JumpToClassStart      = ClassDefinition
JumpToFunctionStart   = FunctionDefinition
JumpToOnInit          = OnInitFunction
JumpToOnTick          = OnTickFunction
JumpToOnDeinit        = OnDeinitFunction
JumpToOnTester        = OnTesterFunction
JumpToChartEvent      = OnChartEventFunction
JumpToConstructor     = ConstructorDefinition
JumpToDestructor      = DestructorDefinition
JumpToStruct          = StructDefinition
JumpToEnum            = EnumDefinition
JumpToInput           = InputDefinition
JumpToProperty        = PropertyDefinition
JumpToBuffer          = IndicatorBuffer
JumpToRegionStart     = RegionStart

[Formatting]
IndentSize           = 4
TabSize              = 4
UseSpaces            = true
MaxLineLength        = 120
BraceStyle           = Allman

[Documentation]
RequireClassDocs     = true
RequireFunctionDocs  = true
DocStyle            = Doxygen

[Naming]
ClassPrefix          = C
StructPrefix         = S
EnumPrefix           = E
InterfacePrefix      = I
ConstantPrefix       = k
GlobalPrefix         = g_
MemberPrefix         = m_
ParameterPrefix      = 

[CodeGeneration]
GenerateGettersSetters = true
GenerateConstructors   = true
GenerateDestructors    = true
GenerateEventHandlers  = true

[ErrorChecking]
CheckNullPointers    = true
CheckArrayBounds     = true
CheckDivisionByZero  = true
CheckMemoryLeaks     = true
; -- MQL5 Specific Error Checking --
CheckTradeContext    = true    ; Check if trade context is busy
CheckMarketOpen      = true    ; Verify market is open before trading
CheckFreeMargin      = true    ; Verify sufficient margin before trades
CheckStopLevels      = true    ; Validate stop loss and take profit levels
CheckSpreadLevels    = true    ; Check if spread is within acceptable range
CheckTradeVolume     = true    ; Verify trade volume is within limits
CheckTradingHours    = true    ; Verify trading is allowed at current hour
CheckSymbolTrade     = true    ; Check if symbol trading is enabled

[Optimization]
InlineSmallFunctions = true
UnrollSmallLoops     = true
OptimizeForSpeed     = true

[Testing]
GenerateUnitTests    = true
TestDataDirectory    = tests
MockObjectPrefix     = Mock_

[MetaTrader]
DefaultTimeframe     = PERIOD_H1
DefaultSymbol        = EURUSD
BacktestPeriod       = 6
OptimizationCriteria = 0
; -- MQL5 Trading Settings --
DefaultMagicNumber   = 123456      ; Unique identifier for EA trades
MaxSpread           = 20           ; Maximum allowed spread in points
MaxSlippage         = 3            ; Maximum allowed slippage in points
DefaultLotSize      = 0.1          ; Default trading volume
RiskPercentage     = 2             ; Risk per trade as percentage of balance
UseHedging         = false         ; Whether to allow hedging
UseFixedLots       = true          ; Use fixed lot size vs. dynamic
MaxPositions       = 10            ; Maximum number of open positions
MinDistance        = 20            ; Minimum distance for SL/TP in points
UseBreakEven       = true          ; Enable break-even feature
BreakEvenPoints    = 20            ; Points needed for break-even
TrailingStop       = true          ; Enable trailing stop
TrailingPoints     = 50            ; Points for trailing stop activation
MaxDailyLoss       = 5             ; Maximum daily loss percentage
MaxDrawdown        = 20            ; Maximum allowed drawdown percentage
RequireSpreadCheck = true          ; Enable spread checking
AllowWeekendTrading = false        ; Allow trading during weekends
UseNewsFilter      = true          ; Enable news trading filter

[CodingPrinciples]
; -- Core Principles --
DRY                  = true    ; Don't Repeat Yourself - Avoid code duplication
KISS                 = true    ; Keep It Simple, Stupid - Favor simplicity
YAGNI                = true    ; You Ain't Gonna Need It - Only implement what's necessary
LawOfDemeter         = true    ; Objects should only talk to their immediate friends
CompositionOverInheritance = true    ; Prefer composition over inheritance

; -- Design Principles --
Encapsulation        = true    ; Hide internal state, expose controlled interfaces
Modularity           = true    ; Design in discrete, cohesive components
SeparationOfConcerns = true    ; Different functionalities in distinct modules
CodeReusability      = true    ; Write generalizable, reusable code
Scalability          = true    ; Design for growth and increased load
Performance          = true    ; Optimize appropriately, avoid premature optimization

; -- Validation Rules --
ValidateDRY          = (?s).*?(\b\w+\b)(?:\s*[=;].*?\b\1\b.*?){2,}    ; Detect repeated code patterns
ValidateComplexity   = ^(?:[^{}]*\{){4,}    ; Detect nested complexity > 3 levels
ValidateMethodLength = ^.{500,}$    ; Flag methods longer than 500 characters
ValidateDependencies = ^\s*#include.*$\s*\1    ; Detect duplicate includes
ValidateInheritance  = (?s)class.*:.*:.*\{    ; Flag multiple inheritance

; -- Metrics --
MaxMethodLength      = 50      ; Maximum number of lines per method
MaxClassLength       = 500     ; Maximum number of lines per class
MaxParameters        = 5       ; Maximum number of method parameters
MaxInheritanceDepth  = 3      ; Maximum inheritance depth
MaxCyclomaticComplexity = 10  ; Maximum cyclomatic complexity